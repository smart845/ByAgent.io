import express from "express";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import TelegramBot from "node-telegram-bot-api";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const router = express.Router();

// Simple JSON storage (ephemeral on Render)
const storePath = path.join(__dirname, "..", "users.json");
function readUsers() {
  try { return JSON.parse(fs.readFileSync(storePath, "utf-8")); }
  catch { return { users: [] }; }
}
function writeUsers(data) {
  try { fs.writeFileSync(storePath, JSON.stringify(data, null, 2)); }
  catch (e) { console.error("write users.json failed:", e.message); }
}
function addUser({ id, username, first_name, last_name }) {
  const db = readUsers();
  if (!db.users.find(u => u.id === id)) {
    db.users.push({ id, username, first_name, last_name, createdAt: new Date().toISOString() });
    writeUsers(db);
  }
}

let bot = null;
export function initTelegram() {
  const token = process.env.TELEGRAM_TOKEN;
  if (!token) { console.warn("‚ö†Ô∏è TELEGRAM_TOKEN not set. Telegram bot disabled."); return; }
  bot = new TelegramBot(token, { polling: true });
  console.log("ü§ñ Telegram bot started");

  // /start
  bot.onText(/^\/start(?:\s+(.+))?/, async (msg) => {
    const chatId = msg.chat.id;
    const firstName = msg.from?.first_name || "–¥—Ä—É–≥";
    addUser({ id: msg.from?.id, username: msg.from?.username, first_name: msg.from?.first_name, last_name: msg.from?.last_name });
    const text = `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!

–Ø ‚Äî ByAgeny ü§ñ
–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ üìä

üíé –õ—É—á—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Ç–∞–ø—ã
üìà –ì–ª—É–±–æ–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏ —Ä—ã–Ω–∫–∞
ü§ñ –ò–ò-–∞–≥–µ–Ω—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∞–≤—Ç–æ–∏–¥–µ–π
üìä –û—Ç–∫—Ä—ã—Ç—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
üì≤ –£–º–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∫–∏
üß© –õ—É—á—à–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ

‚ö° –í—Å—ë –¥–ª—è —Ç–≤–æ–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ ‚Äî –≤ –æ–¥–Ω–æ–º –ø–æ–º–æ—â–Ω–∏–∫–µ ByAgeny`;
    const shareBtn = { inline_keyboard: [[{ text: "ü§ù –ü–æ–¥–µ–ª–∏—Ç—å—Å—è ByAgeny", url: "https://t.me/by_agent_bot" }]] };
    await bot.sendMessage(chatId, text, { reply_markup: shareBtn });
  });

  // /alerts
  bot.onText(/^\/alerts/, async (msg) => {
    const chatId = msg.chat.id;
    addUser({ id: msg.from?.id, username: msg.from?.username, first_name: msg.from?.first_name, last_name: msg.from?.last_name });
    const text = `üîî –†–∞–∑–¥–µ–ª ¬´–ê–ª–µ—Ä—Ç—ã¬ª

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Ü–µ–Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üí¨
–í—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤ –∏ –∑–∞–¥–∞–π —É—Å–ª–æ–≤–∏–µ ‚Äî —è –ø—Ä–∏—à–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è.

üìä –ü—Ä–∏–º–µ—Ä: BTCUSDT > 68000`;
    const kb = {
      inline_keyboard: [
        [{ text: "‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç", callback_data: "create_alert" }],
        [{ text: "ü§ù –ü–æ–¥–µ–ª–∏—Ç—å—Å—è ByAgeny", url: "https://t.me/by_agent_bot" }]
      ]
    };
    await bot.sendMessage(chatId, text, { reply_markup: kb });
  });

  bot.on("callback_query", async (q) => {
    try {
      if (q.data === "create_alert") {
        await bot.answerCallbackQuery({ callback_query_id: q.id, text: "–ü—Ä–∏—à–ª–∏ —É—Å–ª–æ–≤–∏–µ: <–¢–∏–∫–µ—Ä> <–æ–ø–µ—Ä–∞—Ç–æ—Ä> <—Ü–µ–Ω–∞>" });
        await bot.sendMessage(q.message.chat.id, "–ù–∞–ø—Ä–∏–º–µ—Ä: `BTCUSDT > 68000`\n(–¥–µ–º–æ, –ø–æ—Ç–æ–º —Å–≤—è–∂–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º –∞–ª–µ—Ä—Ç-API)", { parse_mode: "Markdown" });
      }
    } catch (e) {
      console.error("callback_query error:", e.message);
    }
  });
}

// Healthcheck
router.get("/telegram/health", (req, res) => {
  res.json({ ok: !!bot, polling: !!bot });
});

export default router;
