import express from "express";
import fetch from "node-fetch";

const router = express.Router();

// üîÅ –°–ø–∏—Å–æ–∫ –∑–µ—Ä–∫–∞–ª Bybit, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
const BYBIT_MIRRORS = [
  "https://api.bytick.com",
  "https://api.bybit.me",
  "https://api.bybits.in",
  "https://api.bybitglobal.com"
];

// üîç –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Bybit —Å –ø–µ—Ä–µ–±–æ—Ä–æ–º –∑–µ—Ä–∫–∞–ª
async function fetchBybitData() {
  const endpoint = "/v5/market/tickers?category=linear";
  let lastError = null;

  for (const base of BYBIT_MIRRORS) {
    const url = ${base}${endpoint};
    console.log(`üåç Trying ${url}`);
    try {
      const response = await fetch(url);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      if (response.ok) {
        const data = await response.json();
        if (data?.result?.list) {
          console.log(`‚úÖ Success from ${base}`);
          return data.result.list;
        } else {
          console.warn(`‚ö†Ô∏è Unexpected response format from ${base}`);
        }
      } else {
        console.warn(`‚ùå ${base} returned ${response.status} ${response.statusText}`);
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è Fetch failed from ${base}: ${error.message}`);
      lastError = error;
    }
  }

  throw new Error(`All Bybit mirrors failed${lastError ? : ${lastError.message} : ""}`);
}

// üìä API /api/movers
router.get("/movers", async (req, res) => {
  try {
    const data = await fetchBybitData();

    // –ü—Ä–∏–º–µ—Ä —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ‚Äî –ø–æ –æ–±—ä—ë–º—É —Ç–æ—Ä–≥–æ–≤
    const sorted = data
      .filter(item => item.volume24h && !isNaN(Number(item.volume24h)))
      .sort((a, b) => Number(b.volume24h) - Number(a.volume24h))
      .slice(0, 30);

    res.json(sorted);
  } catch (error) {
    console.error("‚ùå Bybit API error:", error.message);
    res.status(500).json({ error: error.message });
  }
});

export default router;
