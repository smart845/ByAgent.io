import { fmt } from './formatters.js';
import { fetchAllTickersWithFunding } from '../services/bybit-api.js';
import { getFavorites, toggleFavorite, getAlerts, addAlert, removeAlert } from './storage.js';

// Function to handle the "–ù–∞–π—Ç–∏" (Find) button logic and "–°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç" in the Alerts modal
export function setupAlertsModal(drawer) {
  const alertFindBtn = drawer.querySelector('#alertFind');
  const alertSymInput = drawer.querySelector('#alertSym');
  const liveDisplay = drawer.querySelector('#liveTickerDisplay');
  const liveSymbol = drawer.querySelector('#liveTickerSymbol');
  const livePrice = drawer.querySelector('#liveTickerPrice');
  const alertPriceInput = drawer.querySelector('#alertPrice');
  const alertCreateBtn = drawer.querySelector('#alertCreate');
  const alertsList = drawer.querySelector('#activeAlertsList');
  
  let currentLiveSymbol = alertSymInput.value.trim().toUpperCase();

  // Helper to format price (simple simulation)
  function formatPrice(price) {
    return fmt(price, 2);
  }
  
  // Renders the list of active alerts
  function renderAlerts() {
    const alerts = getAlerts();
    if (!alertsList) return;

    if (alerts.length === 0) {
      alertsList.innerHTML = '<div class="mini mono" style="color:var(--muted)">–°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –ø—É—Å—Ç.</div>';
      return;
    }

    alertsList.innerHTML = alerts.map(alert => {
      const timeStr = new Date(alert.timestamp).toLocaleTimeString('ru-RU');
      return `
        <div class="row" style="margin-bottom: 6px; padding: 4px 0; border-bottom: 1px dashed rgba(64,64,64,.5); justify-content:space-between; align-items:center;">
          <span class="mono n-blue" style="flex:1 1 80px;">${alert.symbol}</span>
          <span class="mono n-green" style="flex:1 1 80px;">> ${formatPrice(alert.price)}</span>
          <span class="mini mono" style="flex:0 1 100px;">${timeStr}</span>
          <span class="mini mono" style="flex:0 1 40px;">üü¢</span>
          <button class="btn delete-alert-btn" data-id="${alert.id}" style="flex:0 1 auto; padding: 4px 8px; font-size: 12px; background: var(--red); border: none;">–£–¥–∞–ª–∏—Ç—å</button>
        </div>
      `;
    }).join('');

    // Add delete functionality
    alertsList.querySelectorAll('.delete-alert-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const id = +e.target.dataset.id;
        removeAlert(id);
        renderAlerts(); // Re-render the list
      });
    });
  }

  // Initial render of alerts
  renderAlerts();

  // 1. "–ù–∞–π—Ç–∏" (Find) button logic
  if (alertFindBtn && alertSymInput) {
    alertFindBtn.addEventListener('click', () => {
      let sym = alertSymInput.value.trim().toUpperCase();
      if (sym && !sym.endsWith('USDT')) {
        sym += 'USDT';
      }
      alertSymInput.value = sym;
      currentLiveSymbol = sym;
      
      // Simulate fetching live price
      const simulatedPrice = (Math.random() * 10000 + 20000); // e.g., 20000 to 30000
      
      liveSymbol.textContent = sym;
      livePrice.textContent = formatPrice(simulatedPrice);
      liveDisplay.style.display = 'flex'; // Show the live display
      
      console.log('Searching for ticker:', sym);
    });
  }

  // 2. "–°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç" (Create Alert) button logic
  if (alertCreateBtn && alertPriceInput && alertsList) {
    alertCreateBtn.addEventListener('click', () => {
      const targetPrice = alertPriceInput.value.trim();
      if (!currentLiveSymbol || !targetPrice) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏ –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É.');
        return;
      }

      const priceNum = parseFloat(targetPrice.replace(/,/g, '.').replace(/\s/g, ''));
      if (isNaN(priceNum) || priceNum <= 0) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É.');
        return;
      }
      
      // Add alert to storage
      addAlert(currentLiveSymbol, priceNum);
      
      // Re-render the list
      renderAlerts();

      // Clear the price input
      alertPriceInput.value = '';
    });
  }
}

// Function that generates the content of the modal window based on the title
export function generateDrawerContent(title) {
  let content = '';
  let apiPath = '';

  switch (title) {
    case '–ö–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥':
      apiPath = '/api/leaderboard';
      content = `
        <div>–ö–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥ ByAgent Alpha</div>
        <div class="mini mono" style="margin-top:4px;">${apiPath} –ø–æ–¥–∫–ª—é—á–∏–º –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–¥–µ–º–æ).</div>
      `;
      break;
    case '–°–ø—Ä–µ–¥—ã':
      apiPath = '/api/spreads';
      content = `
        <div>–°–ø—Ä–µ–¥—ã ‚Ä¢ BTCUSDT</div>
        <div class="mini mono" style="margin-top:4px;">${apiPath} –ø–æ–¥–∫–ª—é—á–∏–º –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–¥–µ–º–æ).</div>
      `;
      break;
    case 'DeFi':
      apiPath = '/api/defi';
      content = `
        <div>DeFi –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ ‚Ä¢ BTC</div>
        <div class="mini mono" style="margin-top:4px;">${apiPath} –ø–æ–¥–∫–ª—é—á–∏–º –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–¥–µ–º–æ).</div>
      `;
      break;
    case '–°–∏–≥–Ω–∞–ª—ã 10x':
      content = `
        <div>–°–∏–≥–Ω–∞–ª—ã 10x</div>
        <div class="mini mono" style="margin-top:4px;">–ú–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.</div>
      `;
      break;
    case '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
      content = `
        <div style="display:flex; align-items:center; gap:8px;"><span style="font-size:20px;">‚≠ê</span> –ò–∑–±—Ä–∞–Ω–Ω–æ–µ</div>
        <div class="row" style="margin-top:10px; gap:8px;">
          <input id="favSymInput" class="input" placeholder="–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä. BTCUSDT)" style="flex:1 1 200px;"/>
          <button id="addFavBtn" class="btn">–î–æ–±–∞–≤–∏—Ç—å</button>
        </div>
        <div id="favoritesList" style="margin-top:10px;">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      `;
      setTimeout(async()=>{ 
        try{ 
          document.querySelector('#favoritesList').innerHTML = await renderFavoritesHTML(); 
          
          // Add event listener for adding a new favorite
          const addFavBtn = document.querySelector('#addFavBtn');
          if (addFavBtn) {
            addFavBtn.addEventListener('click', () => {
              const symInput = document.querySelector('#favSymInput');
              let sym = symInput.value.trim().toUpperCase();
              if (sym && !sym.endsWith('USDT')) {
                sym += 'USDT';
              }
              if (sym) {
                toggleFavorite(sym);
                document.querySelector('#favoritesList').innerHTML = renderFavoritesHTML(); // Re-render immediately
                symInput.value = '';
              }
            });
          }
        }catch(e){ 
          document.querySelector('#favoritesList').textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: '+e.message; 
        } 
      });
      break;
    case 'Wallet':
      content = `
        <div style="display:flex; align-items:center; justify-content:space-between;">
          <span>Wallet / –ü–æ–¥–ø–∏—Å–∫–∞ (TON)</span>
          <span class="mini mono n-red">–ù–µ –∞–∫—Ç–∏–≤–Ω–∞</span>
        </div>
        <h3 style="margin:16px 0 8px 0; color:var(--text);">Wallet / –ü–æ–¥–ø–∏—Å–∫–∞</h3>
        <div class="row">
          <button class="btn" style="flex:0 1 auto;">–ü–æ–¥–∫–ª—é—á–∏—Ç—å TON Wallet</button>
          <div class="pill"><span class="k mono">–ê–¥—Ä–µ—Å:</span><span class="mono">‚Äî</span></div>
          <div class="pill"><span class="k mono">–ë–∞–ª–∞–Ω—Å:</span><span class="mono">‚Äî</span></div>
        </div>
        <h3 style="margin:16px 0 8px 0; color:var(--text);">–ü–æ–¥–ø–∏—Å–∫–∞ ByAgent ‚Äî –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π</h3>
        <div class="mini mono" style="margin-bottom:12px;">–°—Ç–æ–∏–º–æ—Å—Ç—å: 2 TON (–¥–µ–º–æ-–æ–ø–ª–∞—Ç–∞)</div>
        <div class="row" style="align-items:center; gap:16px;">
          <label style="display:flex; align-items:center; gap:8px;">
            <input type="checkbox" style="width:16px; height:16px;"> –Ø –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          </label>
          <label style="display:flex; align-items:center; gap:8px;">
            <input type="checkbox" style="width:16px; height:16px;"> –°–æ–≥–ª–∞—Å–µ–Ω —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
          </label>
        </div>
        <button class="btn" style="margin-top:20px; flex:0 1 auto;">–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 2 TON</button>
        <div class="mini mono" style="margin-top:8px; color:var(--muted)">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –∏ –æ—Ç–º–µ—Ç—å—Ç–µ –æ–±–∞ —á–µ–∫–±–æ–∫—Å–∞</div>
      `;
      break;
    case '–ê–ª–µ—Ä—Ç—ã':
      content = `
        <div>–ê–ª–µ—Ä—Ç—ã</div>
        <div class="row" style="margin-top:10px; align-items:center;">
          <span style="font-size:20px;">‚ö†Ô∏è</span>
          <div class="mini mono" style="flex:1 1 auto;">–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ <a href="https://t.me/by_agent_boty_agent_bot" target="_blank" style="color:var(--silver);">@By_agent_bot</a> –∏ –Ω–∞–∂–º–∏ Start.</div>
          <button class="btn" style="flex:0 1 auto;">–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞</button>
        </div>
        <h3 style="margin:20px 0 8px 0; color:var(--text); display:flex; justify-content:space-between; align-items:center;">
          <span>–¶–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã</span>
          <span class="mini mono">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram</span>
        </h3>
        <!-- Live Ticker and Price Display -->
        <div id="liveTickerDisplay" class="card" style="margin-bottom: 10px; padding: 10px; display: none; align-items: center; justify-content: space-between;">
          <span id="liveTickerSymbol" class="mono sym n-blue" style="font-size: 1.2em;">‚Äî</span>
          <span id="liveTickerPrice" class="mono n-green" style="font-size: 1.2em;">‚Äî</span>
        </div>
        <!-- Ticker Search Row -->
        <div class="row" style="gap:8px; margin-bottom: 8px;">
          <input id="alertSym" class="input" value="BTCUSDT" placeholder="–¢–∏–∫–µ—Ä (–Ω–∞–ø—Ä. BTC)" style="flex:1 1 180px;"/>
          <button id="alertFind" class="btn" style="flex:0 1 auto; padding: 11px 16px;">–ù–∞–π—Ç–∏</button>
        </div>
        <!-- Alert Creation Row -->
        <div class="row" style="gap:8px;">
          <input id="alertPrice" class="input" placeholder="–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞" style="flex:1 1 180px;"/>
          <button id="alertCreate" class="btn" style="flex:0 1 auto; padding: 11px 16px;">–°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç</button>
        </div>
        <div class="mini mono" style="margin-top:8px; color:var(--muted)">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.</div>

        <h3 style="margin:20px 0 8px 0; color:var(--text);">–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã</h3>
        <div id="activeAlertsList" style="border: 1px solid var(--border); border-radius: 12px; padding: 10px; background: rgba(0,0,0,.15); max-height: 200px; overflow-y: auto;">
          <div class="mini mono" style="color:var(--muted)">–°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –ø—É—Å—Ç.</div>
        </div>
      `;
      break;
    case '–°–µ—Ç–∞–ø—ã':
      content = `<div id="setupsBox" class="mini mono">–ó–∞–≥—Ä—É–∑–∫–∞...</div>`;
      setTimeout(async()=>{ try{ document.querySelector('#setupsBox').innerHTML = await renderSetupsHTML(); }catch(e){ document.querySelector('#setupsBox').textContent = '–û—à–∏–±–∫–∞: '+e.message; } });
      break;
    case '–ê–Ω–æ–º–∞–ª–∏–∏':
      content = `<div id="anomBox" class="mini mono">–ó–∞–≥—Ä—É–∑–∫–∞...</div>`;
      setTimeout(async()=>{ try{ document.querySelector('#anomBox').innerHTML = await renderAnomaliesHTML(); }catch(e){ document.querySelector('#anomBox').textContent = '–û—à–∏–±–∫–∞: '+e.message; } });
      break;
    case '–¢–æ–ø —Ä–æ—Å—Ç/–ø–∞–¥–µ–Ω–∏–µ':
      content = `<div id="moversBox" class="mini mono">–ó–∞–≥—Ä—É–∑–∫–∞...</div>`;
      setTimeout(async()=>{ try{ document.querySelector('#moversBox').innerHTML = await renderTopMoversHTML(); }catch(e){ document.querySelector('#moversBox').textContent = '–û—à–∏–±–∫–∞: '+e.message; } });
      break;
    case '–õ–∏—Å—Ç–∏–Ω–≥–∏':
      apiPath = '/api/listings';
      content = `
        <div>–õ–∏—Å—Ç–∏–Ω–≥–∏ (–Ω–æ–≤—ã–µ / –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ)</div>
        <div class="mini mono" style="margin-top:4px;">${apiPath} –ø–æ–¥–∫–ª—é—á–∏–º –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–¥–µ–º–æ).</div>
      `;
      break;
    case '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å App':
      apiPath = '/api/stats';
      content = `
        <div>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</div>
        <div class="mini mono" style="margin-top:4px;">${apiPath} –ø–æ–¥–∫–ª—é—á–∏–º –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–¥–µ–º–æ).</div>
      `;
      break;
    default:
      content = `<p class="mini">–ú–æ–¥—É–ª—å ¬´${title}¬ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.</p>`;
      break;
  }

  return content;
}

export aexport async function renderTopMoversHTML(){
  const allTickers = await fetchAllTickersWithFunding();
  
  const rows = allTickers.map(t => ({
    sym: t.symbol,
    last: t.lastPrice,
    ch: t.price24hPcnt,
    funding: t.fundingRate,
    turn: t.turnover24h
  }));
  
  const gain = [...rows].sort((a, b) => b.ch - a.ch).slice(0, 50); // –¢–æ–ø 50
  const lose = [...rows].sort((a, b) => a.ch - b.ch).slice(0, 50); // –¢–æ–ø 50

  const line = (x) => `
    <div class="row" style="justify-content:space-between;gap:8px;align-items:center;padding:4px 0;">
      <div class="mono" style="min-width:110px;">
        <span style="cursor:pointer;" data-action="select-sym" data-sym="${x.sym}">${x.sym}</span>
      </div>
      <div class="mono" style="min-width:90px;">${fmt.price(x.last)}</div>
      <div class="mono" style="min-width:70px;color:${x.ch >= 0 ? 'var(--green)' : 'var(--red)'}">${x.ch.toFixed(2)}%</div>
      <div class="mono" style="min-width:70px;color:${x.funding >= 0 ? 'var(--green)' : 'var(--red)'}">${(x.funding * 100).toFixed(4)}%</div>
      <div>${makeActionIcons(x.sym, x.last)}</div>
    </div>`;

  return `
    <div style="display:grid;grid-template-columns:1fr 1fr;gap:12px;">
      <div>
        <h3>–¢–æ–ø —Ä–æ—Å—Ç (24—á)</h3>
        <div class="mini mono" style="margin-bottom:4px;">–¢–∏–∫–µ—Ä | –¶–µ–Ω–∞ | %24—á | –§–∞–Ω–¥–∏–Ω–≥</div>
        <div style="max-height:480px;overflow-y:auto;border:1px solid var(--panel);padding:8px;border-radius:8px;">
          ${gain.map(line).join('')}
        </div>
      </div>
      <div>
        <h3>–¢–æ–ø –ø–∞–¥–µ–Ω–∏–µ (24—á)</h3>
        <div class="mini mono" style="margin-bottom:4px;">–¢–∏–∫–µ—Ä | –¶–µ–Ω–∞ | %24—á | –§–∞–Ω–¥–∏–Ω–≥</div>
        <div style="max-height:480px;overflow-y:auto;border:1px solid var(--panel);padding:8px;border-radius:8px;">
          ${lose.map(line).join('')}
        </div>
      </div>
    </div>
    <div class="row" style="margin-top:12px;justify-content:center;">
      <button class="btn n-green" style="width:50%" onclick="sendTestTelegram()">üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –≤ Telegram</button>
    </div>
    `;
}\"width:100%\" onclick=\"sendTestTelegram()\">üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –≤ Telegram</button></div>
</div>
      </div>
    </div>`;
}

function makeActionIcons(sym, last){
  const fav = `<button class="btn" data-action="toggle-fav" data-sym="${sym}" data-fav-icon="${sym}" style="padding:2px 6px;">‚òÜ</button>`;
  const al  = `<button class="btn" data-action="quick-alert" data-sym="${sym}" data-price="${last}" style="padding:2px 6px;">üîî</button>`;
  const sel = `<button class="btn" data-action="select-sym" data-sym="${sym}" style="padding:2px 6px;">üìà</button>`;
  const isFav = getFavorites().includes(sym);
  const fav = `<button class="btn" data-action="toggle-fav" data-sym="${sym}" style="padding:2px 6px;">${isFav ? '‚≠ê' : '‚òÜ'}</button>`;
  const al  = `<button class="btn" data-action="quick-alert" data-sym="${sym}" data-price="${last}" style="padding:2px 6px;">üîî</button>`;
  const sel = `<button class="btn" data-action="select-sym" data-sym="${sym}" style="padding:2px 6px;">üìà</button>`;
  return sel + ' ' + fav + ' ' + al;
}

// --- Setup and Anomalies are using a simplified logic for demonstration ---
// The user requested: –æ–±—ä–µ–º—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º, —Ä–∞—Ç–∏–æ, –∏ –ø–æ –≤—Å–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
// The current implementation uses EMA50/200 and RSI, which is a good start for "–ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º"
// We will enhance the display with Volume (Turnover) from the ticker data.

export async function renderSetupsHTML(){
  const allTickers = await fetchAllTickersWithFunding();
  const base = allTickers.slice(0, 60); // Limit to 60 for performance in a single run

  // Fetch klines for the selected base symbols
  const kl = await Promise.all(base.map(async r=>{
    try {
      const k = await byF('/v5/market/kline',{symbol:r.symbol, interval:'15', limit:200});
      const list = (k?.list||[]).map(a=>({t:+a[0], c:+a[4]})).sort((x,y)=>x.t-y.t);
      return { sym:r.symbol, rows:list, turn: r.turnover24h, funding: r.fundingRate };
    } catch (e) {
      console.error(`Error fetching kline for ${r.symbol}:`, e);
      return { sym:r.symbol, rows:[], turn: r.turnover24h, funding: r.fundingRate };
    }
  }));

  // Simple EMA and RSI calculation (moved from utils/indicators.js, which doesn't exist)
  function ema(arr,p){ const k=2/(p+1); let e=null; return arr.map(v=>e=e==null?v:v*k+e*(1-k)); }
  function rsi(cl,period=14){ let g=0,l=0,rs=new Array(cl.length).fill(NaN);
    for(let i=1;i<cl.length;i++){const d=cl[i]-cl[i-1]; g=(g*(period-1)+Math.max(d,0))/period; l=(l*(period-1)+Math.max(-d,0))/period; if(i>=period){const r=l===0?100:100-(100/(1+(g/(l||1e-9)))); rs[i]=r;} } return rs;}

  const out=[];
  for(const k of kl){
    const c=k.rows.map(r=>r.c); 
    if(c.length<200) continue; // Need enough data for EMA200
    
    const e50=ema(c,50).slice(-1)[0];
    const e200=ema(c,200).slice(-1)[0];
    const r=rsi(c,14).slice(-1)[0];
    const last=c[c.length-1];
    
    let tag=null; 
    // Simplified Intraday Setup Logic: Price above EMAs and RSI > 55 for LONG, or vice versa for SHORT
    if(last>e50 && e50>e200 && r>55) tag='LONG'; 
    else if(last<e50 && e50<e200 && r<45) tag='SHORT';
    
    if(tag) {
      out.push({
        sym: k.sym,
        last: last,
        tag: tag,
        rsi: r,
        turn: k.turn,
        funding: k.funding
      });
    }
  }
  // Sort by confidence (RSI distance from 50) and then by LONG/SHORT
  out.sort((a,b)=>a.tag===b.tag?Math.abs(b.rsi-50)-Math.abs(a.rsi-50):(a.tag==='LONG'?-1:1));

  const line = (x)=>`
    <div class="row" style="justify-content:space-between;gap:8px;align-items:center;padding:4px 0;">
      <div class="mono" style="min-width:120px;">
        <span style="cursor:pointer;" data-action="select-sym" data-sym="${x.sym}">${x.sym}</span>
      </div>
      <div class="mono" style="min-width:90px;">${fmt.price(x.last)}</div>
      <div class="mono" style="min-width:70px;color:${x.tag==='LONG'?'var(--green)':'var(--red)'}">${x.tag}</div>
      <div class="mono" style="min-width:70px;">RSI ${isFinite(x.rsi)?x.rsi.toFixed(1):'‚Äî'}</div>
      <div class="mono" style="min-width:80px;">Vol ${fmt.num(x.turn)}</div>
      <div class="mono" style="min-width:70px;color:${x.funding >= 0 ? 'var(--green)' : 'var(--red)'}">${(x.funding * 100).toFixed(4)}%</div>
      <div>${makeActionIcons(x.sym, x.last)}</div>
    </div>`;

  return `
    <div class="mini mono" style="margin-bottom:4px;">–¢–∏–∫–µ—Ä | –¶–µ–Ω–∞ | –°–µ—Ç–∞–ø | RSI | –û–±—ä–µ–º | –§–∞–Ω–¥–∏–Ω–≥</div>
    <div style="max-height:480px;overflow-y:auto;border:1px solid var(--panel);padding:8px;border-radius:8px;">
      ${out.length > 0 ? out.map(line).join('') : '<div class="mini mono">–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–µ—Ç–∞–ø–æ–≤ –ø–æ —Ç–µ–∫—É—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.</div>'}
    </div>`;
}

export async function renderAnomaliesHTML(){
  const allTickers = await fetchAllTickersWithFunding();
  
  const rows = allTickers.map(t => ({
    sym: t.symbol,
    last: t.lastPrice,
    ch24: t.price24hPcnt,
    turn: t.turnover24h,
    funding: t.fundingRate
  }));
  
  // Anomaly Score: High Change + High Volume (Turnover) + High/Low Funding Rate
  // The user requested: –∞–Ω–æ–º–∞–ª—å–Ω—ã–º —Ä–æ—Å—Ç–æ–º/–ø–∞–¥–µ–Ω–∏–µ–º, –ø–æ –Ω–∞—Ç—Ä, –º–µ–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤—Å–µ–º –∞–Ω–æ–º–∞–ª—å–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
  // Formula: Abs(Change) * Weight + Log10(Turnover + 1) * Weight + Abs(Funding) * Weight
  const top = rows.map(r => {
    const score = (Math.abs(r.ch24) * 1.5) + (Math.log10(r.turn + 1) * 0.8) + (Math.abs(r.funding) * 1000);
    return { ...r, score };
  }).sort((a, b) => b.score - a.score).slice(0, 50); // –¢–æ–ø 50 –∞–Ω–æ–º–∞–ª–∏–π

  const line = (x)=>`
    <div class="row" style="justify-content:space-between;gap:8px;align-items:center;padding:4px 0;">
      <div class="mono" style="min-width:110px;">
        <span style="cursor:pointer;" data-action="select-sym" data-sym="${x.sym}">${x.sym}</span>
      </div>
      <div class="mono" style="min-width:90px;">${fmt.price(x.last)}</div>
      <div class="mono" style="min-width:70px;color:${x.ch24 >= 0 ? 'var(--green)' : 'var(--red)'}">${x.ch24.toFixed(2)}%</div>
      <div class="mono" style="min-width:80px;">Vol ${fmt.num(x.turn)}</div>
      <div class="mono" style="min-width:70px;color:${x.funding >= 0 ? 'var(--green)' : 'var(--red)'}">${(x.funding * 100).toFixed(4)}%</div>
      <div>${makeActionIcons(x.sym, x.last)}</div>
    </div>`;
    
  return `
    <div class="mini mono" style="margin-bottom:4px;">–¢–∏–∫–µ—Ä | –¶–µ–Ω–∞ | %24—á | –û–±—ä–µ–º | –§–∞–Ω–¥–∏–Ω–≥</div>
    <div style="max-height:480px;overflow-y:auto;border:1px solid var(--panel);padding:8px;border-radius:8px;">
      ${top.map(line).join('')}
    </div>`;
}
  const allTickers = await fetchAllTickersWithFunding();
  
  const rows = allTickers.map(t => ({
    sym: t.symbol,
    last: t.lastPrice,
    ch24: t.price24hPcnt,
    turn: t.turnover24h,
    funding: t.fundingRate
  }));
  
  // Anomaly Score: High Change + High Volume (Turnover) + High/Low Funding Rate
  // The user requested: –∞–Ω–æ–º–∞–ª—å–Ω—ã–º —Ä–æ—Å—Ç–æ–º/–ø–∞–¥–µ–Ω–∏–µ–º, –ø–æ –Ω–∞—Ç—Ä, –º–µ–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤—Å–µ–º –∞–Ω–æ–º–∞–ª—å–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
  // Formula: Abs(Change) * Weight + Log10(Turnover + 1) * Weight + Abs(Funding) * Weight
  const top = rows.map(r => {
    const score = (Math.abs(r.ch24) * 1.5) + (Math.log10(r.turn + 1) * 0.8) + (Math.abs(r.funding) * 1000);
    return { ...r, score };
  }).sort((a, b) => b.score - a.score).slice(0, 50); // –¢–æ–ø 50 –∞–Ω–æ–º–∞–ª–∏–π

  const line = (x)=>`
    <div class="row" style="justify-content:space-between;gap:8px;align-items:center;padding:4px 0;">
      <div class="mono" style="min-width:110px;">
        <span style="cursor:pointer;" data-action="select-sym" data-sym="${x.sym}">${x.sym}</span>
      </div>
      <div class="mono" style="min-width:90px;">${fmt.price(x.last)}</div>
      <div class="mono" style="min-width:70px;color:${x.ch24 >= 0 ? 'var(--green)' : 'var(--red)'}">${x.ch24.toFixed(2)}%</div>
      <div class="mono" style="min-width:80px;">Vol ${fmt.num(x.turn)}</div>
      <div class="mono" style="min-width:70px;color:${x.funding >= 0 ? 'var(--green)' : 'var(--red)'}">${(x.funding * 100).toFixed(4)}%</div>
      <div>${makeActionIcons(x.sym, x.last)}</div>
    </div>`;
    
  return `
    <div class="mini mono" style="margin-bottom:4px;">–¢–∏–∫–µ—Ä | –¶–µ–Ω–∞ | %24—á | –û–±—ä–µ–º | –§–∞–Ω–¥–∏–Ω–≥</div>
   return `<div style="max-height:480px;overflow-y:auto;border:1px solid var(--panel);padding:8px;border-radius:8px;">${top.map(line).join('')}</div>`;
}

export async function renderFavoritesHTML() {
  const favorites = getFavorites();
  if (favorites.length === 0) {
    return '<div class="mini mono">–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.</div>';
  }

  // Fetch fresh data for favorites
  const allTickers = await fetchAllTickersWithFunding();
  const favTickers = allTickers.filter(t => favorites.includes(t.symbol));

  const lines = favTickers.map(t => {
    const isFav = true; // It is a favorite, so it's true
    const favIcon = isFav ? '‚≠ê' : '‚òÜ';
    const price = t.lastPrice;
    const ch = t.price24hPcnt;
    const funding = t.fundingRate;

    return `
      <div class="row" style="justify-content:space-between;gap:8px;align-items:center;padding:4px 0;border-bottom:1px dashed var(--border);">
        <div class="mono" style="min-width:110px;">
          <span style="cursor:pointer;" data-action="select-sym" data-sym="${t.symbol}">${t.symbol}</span>
        </div>
        <div class="mono" style="min-width:90px;">${fmt.price(price)}</div>
        <div class="mono" style="min-width:70px;color:${ch >= 0 ? 'var(--green)' : 'var(--red)'}">${ch.toFixed(2)}%</div>
        <div class="mono" style="min-width:70px;color:${funding >= 0 ? 'var(--green)' : 'var(--red)'}">${(funding * 100).toFixed(4)}%</div>
        <div>
          <button class="btn" data-action="toggle-fav" data-sym="${t.symbol}" style="padding:2px 6px;">‚ùå –£–¥–∞–ª–∏—Ç—å</button>
          <button class="btn" data-action="quick-alert" data-sym="${t.symbol}" data-price="${price}" style="padding:2px 6px;">üîî –ê–ª–µ—Ä—Ç</button>
        </div>
      </div>
    `;
  }).join('');

  return `
    <div class="mini mono" style="margin-bottom:4px;">–¢–∏–∫–µ—Ä | –¶–µ–Ω–∞ | %24—á | –§–∞–Ω–¥–∏–Ω–≥</div>
    <div style="max-height:480px;overflow-y:auto;border:1px solid var(--panel);padding:8px;border-radius:8px;">
      ${lines.length > 0 ? lines : '<div class="mini mono">–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤.</div>'}
    </div>`;
}

export function quickAlert(sym, price) {
  // Logic to open the Alerts modal and pre-fill the symbol and price
  const drawer = document.getElementById('drawer');
  const drawerTitle = document.getElementById('drawerTitle');
  const drawerBody = document.getElementById('drawerBody');

  drawerTitle.textContent = '–ê–ª–µ—Ä—Ç—ã';
  drawerBody.innerHTML = generateDrawerContent('–ê–ª–µ—Ä—Ç—ã');
  drawer.classList.add('show');

  // Wait for the next tick to ensure the new HTML is in the DOM and setupAlertsModal is called
  setTimeout(() => {
    const alertSymInput = drawer.querySelector('#alertSym');
    const alertPriceInput = drawer.querySelector('#alertPrice');

    if (alertSymInput) alertSymInput.value = sym;
    if (alertPriceInput) alertPriceInput.value = price > 0 ? fmt(price, 2) : '';
    
    // Simulate a click on '–ù–∞–π—Ç–∏' to load the live price
    const alertFindBtn = drawer.querySelector('#alertFind');
    if (alertFindBtn) alertFindBtn.click();
    
    document.getElementById('chartWrap').scrollIntoView({ behavior: 'smooth', block: 'center' });
  }, 100);
}>`;
}

export function sendTestTelegram(){
  const chatId = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram chat_id –¥–ª—è —Ç–µ—Å—Ç–∞:');
  if(!chatId) return;
  fetch('/api/telegram', {
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body: JSON.stringify({ chat_id: chatId, text: '‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –æ—Ç ByAgent Terminal' })
  }).then(r=>r.json()).then(j=>{
    alert(j.success?'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ':'–û—à–∏–±–∫–∞: '+(j.error||'unknown'));
  }).catch(e=>alert('–û—à–∏–±–∫–∞: '+e.message));
}
